#load silently the required packages
options(warn = -1); packages <- c("ggplot2", "data.table", "GGally", "car","corrplot", "RColorBrewer", "MASS", "relaimpo");
#lapply(packages, install.packages, character.only = TRUE)
lapply(packages, require, character.only = TRUE)
lapply(packages, library, character.only = TRUE)
install.packages("GGally")
#load silently the required packages
options(warn = -1); packages <- c("ggplot2", "data.table", "GGally", "car","corrplot", "RColorBrewer", "MASS", "relaimpo");
#lapply(packages, install.packages, character.only = TRUE)
lapply(packages, require, character.only = TRUE)
lapply(packages, library, character.only = TRUE)
install.packages("corrplot")
#load silently the required packages
options(warn = -1); packages <- c("ggplot2", "data.table", "GGally", "car","corrplot", "RColorBrewer", "MASS", "relaimpo");
#lapply(packages, install.packages, character.only = TRUE)
lapply(packages, require, character.only = TRUE)
lapply(packages, library, character.only = TRUE)
install.packages("relaimpo")
#load silently the required packages
options(warn = -1); packages <- c("ggplot2", "data.table", "GGally", "car","corrplot", "RColorBrewer", "MASS", "relaimpo");
#lapply(packages, install.packages, character.only = TRUE)
lapply(packages, require, character.only = TRUE)
lapply(packages, library, character.only = TRUE)
options(warn = 0)
# load the data
data(mtcars)
dt = as.data.table(mtcars)
# if the number of unique values of a variable is below 10, convert the data type to factor
UniqueValues = sapply(apply(dt,2,(unique)),length); factorize = names(which((UniqueValues<10)))
# apply the factorization to all relevant variables.
dt$cyl = as.factor(dt$cyl); dt$vs = as.factor(dt$vs); dt$am = as.factor(dt$am); dt$gear = as.factor(dt$gear); dt$carb = as.factor(dt$carb)
a=round(shapiro.test(dt[am=="1",mpg])$p.value,2)
b= length(dt[am=="1",mpg])
c= round(shapiro.test(dt[am=="0",mpg])$p.value,2)
d= length(dt[am=="0",mpg])
HomTest = var.test(dt[am=="1",mpg], dt[am=="0",mpg])
# if variance p value above threshold, perform t test with unequal variances; otherwise perform considering equal variances
TestStu = t.test(dt[am=="1",mpg],dt[am=="0",mpg], var.equal=ifelse(HomTest$p.value>0.05,TRUE,FALSE), paired=FALSE)
M<-cor(dt[,c(3:7), with = FALSE])
# corrplot(M, method= "number", type="upper", order="hclust",
#         col=brewer.pal(n=8, name="PuOr"),title = "Correlation between numeric variables")
cor.mtest <- function(mat, ...) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(M)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(M, method="color",col=col(200),
type="upper", order="hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=0, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.05, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE, title = "Correlation and significance", mar=c(4,4,4,4), oma=c(0,0,0,0))
# ggpairs(dt,title = "Correlation between variables")
ComPairs = combn(names(dt[,sapply(dt, is.factor), with = FALSE]),2)
mychi = data.frame(matrix(NA, nrow=dim(ComPairs)[2], ncol=2))
for (i in 1: dim(ComPairs)[2]) {
mychi[i,1] = paste (ComPairs[,i], collapse =" ")
#mychi[i,2] = chisq.test(table(dt[,eval(ComPairs[,1]), with = FALSE]))$p.value }
mychi[i,2] = round(fisher.test(table(dt[,eval(ComPairs[,i]), with = FALSE]))$p.value,3) }
NotRelevant = as.data.frame(mychi[mychi$X2>0.05,1])
WrongFit = lm(mpg ~ am, data=dt)
FirstFit <-lm(mpg ~ ., data=dt)
StepWise = step(FirstFit,direction="both",test="F", trace = 0)
OptimizedFit = eval(StepWise$call)
summary(OptimizedFit)
fit1 <- lm(mpg~wt, data=dt)
fit2 <- update (fit1, mpg~wt+hp) #  cont. variables did show improv.
fit3 <- update (fit1,mpg~wt+hp+cyl+am)
knitr::kable(anova(fit1,fit2,fit3))
layout(matrix(c(1,2,3,4),2,2))
plot(WrongFit)
layout(matrix(c(1,1,1,1),1,1))
fit = OptimizedFit
outlierTest(fit)
#qqPlot(fit, main="QQ Plot") #qq plot for studentized resid
#leveragePlots(fit) # leverage plots
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
layout(matrix(c(1,1,1,1),1,1))
knitr::kable(vif(fit))
